@using Microsoft.AspNet.Identity
@model Crunchers.Controllers.CatalogController.CatalogProductsResponse
<head>
    @{
        <script>
         	$( function() {
         	    let value0;
         	    let value1;
         	    if(new URLSearchParams(window.location.search).get('moneyFilter')==null) {
         	            value0=@Model.MinPrice;
         	            value1=@Model.MaxPrice;
         	        }
         	    else {
         	        let values=new URLSearchParams(window.location.search).get('moneyFilter').split(':')
         	        value0=values[0];
         	        value1=values[1];
         	    }
         		$(document).ready($( "#slider-range" ).slider({
         			range: true,
         			min: @(Model.MinPrice),
         			max: @(Model.MaxPrice),
         			values: [ value0, value1 ],
         			slide: function( event, ui ) {
         				$( "#amount" ).val(ui.values[ 0 ] + " - " + ui.values[ 1 ] );
         			}
         		}));
         		$( "#amount" ).val($( "#slider-range" ).slider( "values", 0 ) +
         			" - " + $( "#slider-range" ).slider( "values", 1 ) );
         	} );
         	</script>
    }
</head>
<div id="LoadingImage" style="display:none;background-color: rgb(255, 255, 255); opacity: 0.7; width: 100%; height: 100%; position: absolute; top: 0px; left: 0px; z-index: 99999;">
    <img style="display: block;margin-left: auto;margin-right: auto" src="https://igc-market.ru/images/loading.gif"/>
</div>
<script>
let urlParams = new URLSearchParams(window.location.search);
function UnselectFilter(filterId) {
  location.href=location.href.replace('&filterValues='+encodeURIComponent(urlParams.getAll('filterValues').filter(word=>word.split('_')[0]==filterId)[0]),"") ;
}
function SelectMoneyFilter(filterName,newValue) {
    if (urlParams.get(filterName)==null){
        location.href=location.href+'&'+filterName+'='+newValue;
    }
    else {
        location.href=location.href.replace('&'+filterName+'='+urlParams.get(filterName),'&'+filterName+'='+newValue);
    } 
}
function SelectNonProductFilters(valuesToUnselect,filter,value) {
    let prev=location.href;
        valuesToUnselect.forEach(x=>prev =prev.replace('&'+x+'='+urlParams.get(x),''));
        prev=prev+'&'+filter+'='+true;
        prev=prev+'&'+value+'='+true;
        location.href=prev;
                        
}
function UnSelectNonProductFilters(filters) {
    let prev=location.href;
    filters.forEach(x=>prev =prev.replace('&'+x+'='+urlParams.get(x),''));
    location.href=prev;
}
function SubmitSorting() {
    let type = Array.from(document.getElementById('sortingType').childNodes).filter(x=>x.checked);
    let value = Array.from(document.getElementById('sortingValue').childNodes).filter(x=>x.checked);
    if (type[0].id=='noOrder'||value[0].id=='no'){
        let filtersType = Array.from(document.getElementById('sortingType').childNodes).filter(x=>x.nodeName=="INPUT" );
        let filtersValues = Array.from(document.getElementById('sortingValue').childNodes).filter(x=>x.nodeName=="INPUT" );
        let all = filtersType.concat(filtersValues).map(x=>x.id);
                UnSelectNonProductFilters(all)
    }
    else {
        let filtersType = Array.from(document.getElementById('sortingType').childNodes).filter(x=>x.nodeName=="INPUT" );
                let filtersValues = Array.from(document.getElementById('sortingValue').childNodes).filter(x=>x.nodeName=="INPUT" );
                let all = filtersType.concat(filtersValues).map(x=>x.id);
        SelectNonProductFilters(all,type[0].id,value[0].id);
    } 
}
window.onload= function() {
  let cart = localStorage.getItem("localCart");
  if (cart==null){
      
  }
  else {
      for (x in JSON.parse(cart))
          {
              let node = document.getElementById(x);
              if(node==null)
                  {
                      continue;
                  }
              node.outerHTML='<a id="-1" class="btn btn-default" onclick="">Удалить из корзины</a>';
              let mock = document.getElementById("-1");
              mock.id=x; 
              mock.setAttribute("onclick","deleteFromCart(true,"+x+");")
          }
  }
}
function addToCart(isLocal,productId) {
    $("#LoadingImage").show();
  if(isLocal){
      let ls = localStorage.getItem('localCart');
      if (ls==null || ls=="")
          {
              localStorage.setItem("localCart","{}");
              ls = localStorage.getItem('localCart')
              
          }
      let cart = JSON.parse(ls);
      cart[productId]=1;
      localStorage.setItem('localCart',JSON.stringify(cart));
      $("#LoadingImage").hide();
      alert('Товар успешно добавлен в корзину');
      location.reload();
  }
  else {
      let ls = localStorage.getItem('localCart');
            if (ls==null || ls=="")
                {
                    localStorage.setItem("localCart","{}");
                    ls = localStorage.getItem('localCart')
                    
                }
            let cart = JSON.parse(ls);
            cart[productId]=1;
            localStorage.setItem('localCart',JSON.stringify(cart));
      $.ajax({
                      type: "POST",
                      url: '@Url.RouteUrl(new {controller = "ShoppingCart", action = "ChangeCart"})?productId='+productId+'&value=1',
                      data: { },
                      dataType: 'json',
                      timeout: 15000,
                      success: function (correct) {
                          $("#LoadingImage").hide();
                          alert('Товар успешно добавлен в корзину');
                          location.reload();      
                      },
                      error: function(inc) {
                          $("#LoadingImage").hide();
                          alert('Произошла ошибка');
                          location.reload(); 
                          
                          
                      }
                  });
  }
}
function deleteFromCart(isLocal,productId) {
    $("#LoadingImage").show();
  if (isLocal){
      let ls = localStorage.getItem('localCart');
            if (ls==null || ls=="")
                {
                    localStorage.setItem("localCart","{}");
                    ls = localStorage.getItem('localCart')
                    
                }
            let cart = JSON.parse(ls);
      delete cart[productId];
      localStorage.setItem('localCart',JSON.stringify(cart));
      $("#LoadingImage").hide();
      alert('Товар успешно удален из корзины');
        location.reload();
  }
  else {
      let ls = localStorage.getItem('localCart');
            if (ls==null || ls=="")
                {
                    localStorage.setItem("localCart","{}");
                    ls = localStorage.getItem('localCart')
                    
                }
            let cart = JSON.parse(ls);
            delete cart[productId];
            localStorage.setItem('localCart',JSON.stringify(cart));
       $.ajax({
                            type: "POST",
                            url: '@Url.RouteUrl(new {controller = "ShoppingCart", action = "ChangeCart"})?productId='+productId+'&value=0',
                            data: { },
                            dataType: 'json',
                            timeout: 15000,
                            success: function (correct) {
                                $("#LoadingImage").hide();
                                alert('Товар успешно удален из корзины');
                                location.reload();      
                            },
                            error: function(inc) {
                                $("#LoadingImage").hide();
                                alert('Произошла ошибка');
                                location.reload(); 
                                
                                
                            }
                        });
  }
  
}
</script>
<h1>
    <a href="/Catalog" style="text-decoration: none !important; color: black !important;">←Каталог</a>
</h1>
<form>
    <p>
        <label for="amount">Цена:</label>
        <input type="text" id="amount" readonly style="border:0; color:#f6931f; font-weight:bold;">
    </p>
    <div id="slider-range"></div>
    <br/>
    <div>
        <a class="btn btn-default" onclick="SelectMoneyFilter('moneyFilter',$( '#slider-range' ).slider( 'values', 0 )+':'+$( '#slider-range' ).slider( 'values', 1 ))">Подтвердить цену</a>
    </div>
    <hr/>
    <p>Сортировка:</p>
    <form>
        <div id="sortingType">
            <input name="orderType" type="radio" id="noOrder">
            <label for="noOrder">Нет</label>
            <input name="orderType" type="radio" id="orderBy">
            <label for="orderBy">По возрастанию</label>
            <input name="orderType" type="radio" id="orderByDescending">
            <label for="orderByDescending">По убыванию</label>
        </div>
        <div id="sortingValue">
            <input type="radio" name="orderValue" id="no" checked>
            <label for="no">Нет</label>
            <input type="radio" name="orderValue" id="money">
            <label for="money">По стоимости</label>
            <input type="radio" name="orderValue" id="ratings">
            <label for="ratings">По рейтингу</label>
        </div>
    </form>

    <div>
        <a class="btn btn-default" onclick="SubmitSorting()">Подтвердить сортировку</a>
    </div>
    <hr/>

    @foreach (var filterGroup in Model.Filters)
    {
        @filterGroup.Key
        <br/>
        foreach (var filter in filterGroup)
        {
            if (filter.IsEnabled)
            {
                <a class="btn btn-default" onclick="UnselectFilter(@(filter.FilterId))">x @(filter.FilterShowValue)</a>
            }
            else
            {
                if (filter.isRanged)
                {
                    <a class="btn btn-default" onclick="window.location.href=window.location.href+'&filterValues=@(filter.FilterId)'">@filter.FilterShowValue</a>
                }
                else
                {
                    <a class="btn btn-default" onclick="window.location.href=window.location.href+'&filterValues=@(filter.FilterId)_@(filter.FilterShowValue)'">@filter.FilterShowValue</a>
                }
            }
        }
        <hr/>
    }
</form>

<form>
    @{
        bool isLocal = User?.Identity?.GetUserId() == null;

        foreach (var product in Model.Products)
        {
            var first = product.Select(x => x).First();
            <a href="/Catalog/Product?productId=@product.Key">
                <img src="@first.ImageLink" alt="Изображение отсутствует " width="100" height="100"/>
            </a>
            <a href="/Catalog/Product?productId=@product.Key">@first.ProductName</a>
            <text>@first.ProductPrice руб.</text>
            {
                if (first.RatingsAmount == 0)
                {
                    <text>Рейтинг: 0 (нет оценок)</text>
                }
                else
                {
                    <text>Рейтинг: @(Math.Round((double) first.RatingSum / first.RatingsAmount)) (@first.RatingsAmount)</text>
                }
            }
            if (Model.Cart.ContainsKey(product.Key))
            {
                <a class="btn btn-default" onclick="deleteFromCart(false,@product.Key)">Удалить из корзины</a>
            }
            else
            {
                if (isLocal)
                {
                    <a id="@product.Key" class="btn btn-default" onclick="addToCart(true,@product.Key)">Добавить в корзину</a>
                }
                else
                {
                    <a id="@product.Key" class="btn btn-default" onclick="addToCart(false,@product.Key)">Добавить в корзину</a>
                }
                
            }
            <br/>
        }
    }
</form>